// 接收、处理
/* 接收投票 */
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	rf.mu.Lock()
	defer rf.mu.Unlock()

	if args.Term < rf.CurrentTerm {
		reply.Term = rf.CurrentTerm
		reply.VoteGranted = false
		return
	}
	if args.Term > rf.CurrentTerm {
		rf.turnFollower(args.Term, NoLeader)
	}
	/* args.Term == rf.CurrentTerm */
	/* can not trun follower, because they are same level */
	/* If my VoteFor is not candidater, then i should not vote him */
	/* Be sure my VoteFor is -1 noleader */
	if rf.CanVote(args.CandidateId) {
		reply.Term = rf.CurrentTerm
		reply.VoteGranted = true
		rf.VotedForId = args.CandidateId
		PutDataToChannel(rf.VoteNotify)
	} else {
		reply.Term = rf.CurrentTerm
		reply.VoteGranted = false
	}
}

/* 接收投票 */

/* 接收心跳 */
func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
	defer rf.mu.Unlock()

	if rf.CurrentTerm > args.Term {
		reply.Term = rf.CurrentTerm
		reply.Success = false
		reply.LeaderId = rf.LeaderId
		return
	}

	PutDataToChannel(rf.HeartBeatNotify)

	/* 稳定状态应该是，我是 Follower，并且我的 Term 等于 Leader */

	if rf.State != Follower || rf.CurrentTerm < args.Term {
		rf.turnFollower(args.Term, args.LeaderId)
	}
	reply.Term = rf.CurrentTerm
	reply.Success = true

	PutDataToChannel(rf.HeartBeatNotify)
	return
}
/* 接收心跳 */
// 接收、处理