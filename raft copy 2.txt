// 发送
/* 发送投票 */
func (rf *Raft) SendRequestVote() {
	rf.mu.Lock()
	for i := range rf.peers {
		if i != rf.me {
			args := RequestVoteArgs{
				Term:        rf.CurrentTerm,
				CandidateId: rf.me,
			}
			go func(args RequestVoteArgs, i int) {
				var reply RequestVoteReply
				debug("===> _%d_[%d] ---send vote req---> _%d_", rf.me, rf.CurrentTerm, i)
				ok := rf.sendRequestVote(i, &args, &reply)
				rf.mu.Lock()
				if rf.State == Candidate {
					if ok {
						debug("===> _%d_[%d] <--get vote reply--- [%d] %s", rf.me, rf.CurrentTerm, reply.Term, strconv.FormatBool(reply.VoteGranted))
						if reply.VoteGranted {
							rf.VotedCount++
						}
					} else {
						debug("===> _%d_[%d] ---not send vote req---> [%d]", rf.me, rf.CurrentTerm, i)
					}
					if rf.VotedCount > len(rf.peers)/2 {
						rf.turnLeader()
						PutDataToChannel(rf.ElectLeaderNotify)
					}
				}
				rf.mu.Unlock()
			}(args, i)
		}
	}
	rf.mu.Unlock()
}

/* 发送投票 */

/* 发送心跳 */
func (rf *Raft) SendAppendEntries() {
	rf.mu.Lock()
	for i := range rf.peers {
		if i != rf.me {
			args := AppendEntriesArgs{
				Term:     rf.CurrentTerm,
				LeaderId: rf.me,
			}
			go func(args AppendEntriesArgs, i int) {
				var reply AppendEntriesReply
				
				ok := rf.sendAppendEntries(i, &args, &reply)
				debug("===> _%d_[%d] ---send heart---> _%d_", rf.me, rf.CurrentTerm, i)
				rf.mu.Lock()
				if ok {
					if reply.Success {
						debug("===> _%d_[%d] <---heart--- _%d_[%d]", rf.me, rf.CurrentTerm, i, reply.Term)
					} else {
						debug("===> _%d_[%d] <---refuse heart--- _%d_[%d]", rf.me, rf.CurrentTerm, i, reply.Term)
						rf.turnFollower(reply.Term, reply.LeaderId)
					}
				}
				rf.mu.Unlock()
			}(args, i)
		}
	}
	rf.mu.Unlock()
}
/* 发送心跳 */
// 发送